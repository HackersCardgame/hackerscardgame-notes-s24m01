Subject

Observer +observerCollection
+registerObserver (observer)
+notify() +unregisterObserver (observer)
+notifyObservers()

notifyObservers()
for observer in observerCollection
call observer. notify()

â€˜oncreteObserverA ConcreteObserverB

ptify() +notify()
https://0x8.ch/HackersCardgame3

Inventor:

The observer pattern (also called listener pattern) is
a design pattern in software development. It belongs
to the category of behavior patterns. In the
programming language Java it would need an
interface (public interface Observer) and it would be
used with "implements Observer" (needs exercise
and maybe qfire, quantuminserts, Turbine, Tarmoil
tries to make it hard for you to learn) It does not
mean "survaillance" its a computer science Term,
but of course such a design pattern can also be
abused for surveillance, and eg trigger al6 Card.

To use Design Patterns you first need to learn an
OOP Programming Language

